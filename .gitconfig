[user]
	name = Hutson Betts
	email = hutson@hyper-expanse.net
	signingkey = 0xA5C376AC3772B622
	useConfigOnly = true

[includeIf "gitdir:/home/hbetts/"]
	# When using an account associated with my work laptop, defer to any work-specific configuration.
	path = ~/.dotfiles/.gitconfig-factset

[core]
	# Global attributes file to apply file type specific behavior across all repositories I work with.
	attributesfile = ~/.gitattributes

	# Set to `input` to disable end-of-line conversion from LF to CRLF on checkout of a file from the repository. Instead, files will be checked out with the line endings they have in the repository.
	autocrlf = input

	# Instruct Git to use the following editor when launching a tool to write, or modify, commit messages, or walk the user through a wizard-like workflow.
	editor = code --wait

	# Global ignore list of files I would never want to push into a repository that I would be working with.
	excludesfile = ~/.gitignore

[pull]
	# Automatically rebase local-only commits on top of commits fetched from the remotely tracked repository. This retains the existing structure of the remote's history, and causes local commits to be appended to the history in a linear fashion. This option avoids the default behavior of `git pull`, which fetches commits from the remote repository and "merges" them into the local branch.
	rebase = true

[push]
	# 'Simple' instructs Git to push only the current branch to its upstream branch (the upstream branch for which the local branch is "tracking"), and to make sure the upstream branch name is the same as the local branch. This helps us avoid pushing the incorrect branch to upstream or pushing a branch to the incorrect, name not matching, branch.
	default = simple

[color]
	# By enabling git's UI color option git will color its output if the output goes to a terminal. Output will not be colored for other output modes such as piping to files or other commands. ui=true enables color output for color.branch, color.diff, color.interactive, and color.status.
	ui = true

[commit]
	# Instruct Git to always cyptographically sign commits when the `signingkey` option is set in `.gitconfig`.
	gpgsign = true

[diff]
	# Instruct Git to use the following editor when using git's `difftool` command.
	tool = vscode

	# Instruct Git to use mnemonic prefixes (Such as *i*ndex, *w*ork tree, *c*ommit, or *o*bject) instead of the standard *a* and *b* notation when outputting a diff to the console.
	mnemonicprefix = true

	# In addition to having Git detect, and display, simple file renames, instruct Git to diplay when a file has been copied from one location to another.
	renames = copies

[difftool "vscode"]
	# Custom command to be invoked by Git when the `git difftool` command is called to visualize a diff in an editor.
	cmd = code --wait --diff $LOCAL $REMOTE

[fetch]
	# Automatically prune, a.k.a. delete, local branches, on every fetch request, if those branches were deleted from the remote repository.
	prune = true

[merge]
	# Instruct Git to use the following tool when using git's `mergetool` command.
	tool = vscode

	# Specify the style for Git to use when writing out conflicted hunks to a working tree file upon a merge. A diff3 style will show the changes made on one side of a merge, along with the change made on the other side, along with the original text both sides have modified.
	conflictstyle = diff3

	# Tell Git to run a virtual check-out and check-in of all three stages of a file when resolving a three-way merge to normalize the files to avoid differences caused by changes in a repository's attributes.
	renormalize = true

[mergetool "vscode"]
	# Custom command to be invoked by Git when the `git mergetool` command is called to manage a merge in an editor.
	cmd = code --wait $MERGED

[filter "lfs"]
	# Enable large-file support using the large-file support (LFS) plugin for git.
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[remote "origin"]
	# Fetch any references that begin with `merge-requests`, as these references pertain to merge requests filed against the upstream, `origin`, repository on a GitLab website. By fetching `merge-requests` references, we can easily pull down, and checkout, merge requests submitted by contributors, and test those merge requests locally.
	fetch = +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*

[alias]
	# Minimized log that displays commit messages and a graphical representation of merges and branches. (The 'l' alias relies upon default colors and ordering)
	l = log --abbrev-commit --decorate --graph --oneline
	lf = log --graph --pretty=tformat:'%C(cyan)%h %C(bold yellow)%d %C(white)%s %C(cyan)(%cr) %C(green)<%an> %C(cyan)<%G?>%Creset'

	# Standard log output with additional statistics indicating the number of lines added or removed.
	ll = log --abbrev-commit --decorate --graph --show-signature --stat --pretty=fuller

	# Show commits that are on the local branch and on the remote branch that don't exist on the other. By including the cherry-pick option commits that were pushed or pulled between branches (Even when out of order) will be excluded.
	missing = log --graph  --left-right --cherry-pick --pretty=tformat:'%C(cyan)%h%Creset %C(bold yellow)%d%Creset %s %C(cyan)(%cr) %C(magenta)<%an> %C(cyan)<%G?>%Creset'

	# Show the most recent tag (annotated or lightweight) that is reachable before the current commit in the working copy. We exclude `--abbrev` so that the tag will be printed along with additional metadata, such as the number of additional commits on top of the tagged object, and the hash of the commit object pointed to by the tag.
	lasttag = describe --tags

	# Show the most recent tag (annotated or lightweight) that is reachable after the current commit in the working copy. We exclude `--abbrev` so that the tag will be printed along with additional metadata, such as the number of additional commits on top of the tagged object, and the hash of the commit object pointed to by the tag.
	nexttag = describe --tags --contains

	# List all aliases stored in the user's Git configuration file. In addition to the aliases, display their values.
	aliases = "!git config -l | grep alias | cut -c 7-"

	# Update the current working branch to include the latest changes from the specified remote's master branch. Commits in the working branch are rebased, placed on top of, changes pulled from the remote's master branch. If the name of a remote is not provided to the alias the command will default to the `origin` remote. If you rely on the default behavior, but the local working directory does not have an `origin` remote, then this command will fail.
	update-branch = "!sh -c 'git fetch --jobs=5 ${1:-origin} && git rebase ${1:-origin}/master' -"

	# Show a diff in which individual word changes are inter-mingled with one another. Word additions are shown in green, word deletions are shown in red. This is in contrast to showing changes as line additions or deletions.
	cdiff = diff --color-words

	# List the name of each contributor to the working branch, and along the left of each contributor, the number of commits that person contributed. We also specifically ignore merge commits since they typically don't contain contribution of code to the project.
	contributors = shortlog --numbered --summary --no-merges

	# Cleanup a Git repository by removing dangling objects, deleted branches, and by compressing file revisions. Specific cleanup operations are describe below:
	# * remote prune - Delete stale tracking branches that have already been removed from `origin` but are still available locally in `remotes/origin`.
	# * stash clear - Clear the stash, deleting any stashed changes for this repository.
	# * clean -X - Remove all files ignored by Git through the use of Git's `.gitignore` file. Useful for cleaning out build artifacts.
	# * gc - Compress file revisions (which will reduce disk space consumption and improve performance), and remove unreachable objects. The `--aggressive` option is used to instruct Git to be more aggressive in cleaning, at the expense of more time.
	# * branch --merged - Remove all local, and remote, branches that have been successfully merged into the current checked out local branch.
	# * git fetch --prune - Delete tags (refs/tags) that have already been removed from `origin` (+refs/tags/*) but are still available locally (:refs/tags/*).
	# If the name of a remote is not provided to the alias the command will default to the `origin` remote. If you rely on the default behavior, but the local working directory does not have a `origin` remote, this command will fail.
	cleanup = "!sh -c 'git remote prune origin && git stash clear && git clean -Xdf && git gc --aggressive && git branch --merged | grep -v \"*\" | grep -v master | xargs -n 1 -I _branch sh -c \"git branch -D _branch; git push ${1:-origin} :refs/heads/_branch;\" && git fetch --prune ${1:-origin} \"+refs/tags/*:refs/tags/*\"'"

	# Delete a branch, both locally, and remotely. Delete the branch even if the local branch has staged, or untracked, changes pending commit.
	delete-branch = "!sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -"

	# Setup the local working directory by checking out the master branch, and then resetting the master branch to match the specified remote's master branch. If the name of a remote is not provided to the alias the command will default to the `origin` remote. If you rely on the default behavior, but the local working directory does not have an `origin` remote, this command will fail.
	setup = "!sh -c 'git checkout master && git fetch ${1:-origin} && git reset --hard ${1:-origin}/master && git clean -Xdf' -"

	# Reset the index of the current directory to the previous commit, but do not modify the contents of the working tree. This will cause any changes not committed, or changes included in the reverted commit, to be left in the working directory as modifications that are not staged for commit.
	undo = reset --mixed HEAD~1

	# Add a _Signed-off-by_ to each commit message to certify that I have agreed to the Developer Certificate of Origin (https://developercertificate.org/).
	dco = commit --signoff
