#!/usr/bin/env bash

#====================================================
# Custom Bash Shell Prompt
#
# This script only needs to be sourced upon logging into a system to override the default Bash prompt.
#====================================================

export PROMPT_ENABLE_FILE_INFORMATION=0 # Enable information about file and folders in the current directory.
export PROMPT_ENABLE_SCREEN_INFORMATION=0 # Enable information about the current terminal multiplexer and multiplexer session.
export PROMPT_ENABLE_GIT_REPO_IDENTIFICATION=0 # Enable the display of a repository's (GIT) name for the repository stored in the current directory.
export PROMPT_ENABLE_SVN_REPO_IDENTIFICATION=0 # Enable the display of a repository's (SVN) name for the repository stored in the current directory.

COLOR_OFF='\[\e[0m\]'			# Remove all color modifications.

COLUMN_FIX='\[\033[G\]'			# Forces the Bash prompt to always go to the first column. Resolves the issue where text is sometimes off by two charactesr as a result of control characters such as ^C.

# Regular colors.
BLACK='\[\033[0;30m\]'		# Black.
RED='\[\033[0;31m\]'		# Red.
GREEN='\[\033[0;32m\]'		# Green.
BROWN='\[\033[0;33m\]'		# Brown.
BLUE='\[\033[0;34m\]'		# Blue.
PURPLE='\[\033[0;35m\]'		# Purple.
CYAN='\[\033[0;36m\]'		# Cyan.
WHITE='\[\033[0;37m\]'		# White.

# Bold colors.
B_BLACK='\[\033[1;30m\]'	# Black.
B_RED='\[\033[1;31m\]'		# Red.
B_GREEN='\[\033[1;32m\]'	# Green.
B_YELLOW='\[\033[1;33m\]'	# Yellow.
B_BLUE='\[\033[1;34m\]'		# Blue.
B_PURPLE='\[\033[1;35m\]'	# Purple.
B_CYAN='\[\033[1;36m\]'		# Cyan.
B_WHITE='\[\033[1;37m\]'	# White.

# High intensity colors.
I_Cyan='\[\033[0;94m\]'		# Cyan.

#! Retrieve the Git branch name.
# Retrieve the name of the Git branch in the current directory, if a Git branch exists in the current directory.
ParseGitBranch()
{
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git::\1)/'
}

ParseSVNURL()
{
	svn info 2>/dev/null | grep -e '^URL*' | sed -e 's#^URL: *\(.*\)#\1#g '
}

ParseSVNRepositoryRoot()
{
	svn info 2>/dev/null | grep -e '^Repository Root:*' | sed -e 's#^Repository Root: *\(.*\)#\1\/#g '
}

#! Retrieve the SVN repository name.
# Retrieve the name of the SVN repository in the current directory, if a SVN checkout exists in the current directory.
ParseSVNCheckout()
{
	ParseSVNURL | sed -e 's#^'"$(ParseSVNRepositoryRoot)"'##g' | awk -F / '{print "(svn::"$1 "/" $2 ")"}'
}

#! Retrieve the number of unique proessor cores.
# Retrieve the number of unique processor cores on the system.
GetNumberOfCores()
{
	# Get a count of the unique cores in the system.
	local cores=`cat /proc/cpuinfo | grep "core id" | uniq | wc -l`

	# If that approach did not work then query just the number of processors reported by the system.
	if [ "${cores}" -le 0 ]; then
		cores=`cat /proc/cpuinfo | grep "processor" | uniq | wc -l`
	fi

	# Make sure to return a value greater than zero (Because you have at least one processor core, right?).
	if [ "${cores}" -gt 0 ]; then
		echo "${cores}"
	else
		echo 1
	fi
}

LoadPrompt()
{
	PS1="\n${COLUMN_FIX}"

	# Set user portion of the prompt based on the administrative powers of that user.
	PS1="${PS1}${B_BLACK}("
	if [ "${UID}" -eq 0 ]; then
		if [ -n "${SUDO_USER}" ]; then
			PS1="${PS1}${B_YELLOW}"
		else
			PS1="${PS1}${B_RED}"
		fi
	else
		PS1="${PS1}${CYAN}"
	fi
	PS1="${PS1}\u"

	PS1="${PS1}${B_BLACK}@"

	# Set host portion of the prompt based on whether the host is local or remote.
	if [ -n "${SSH_CONNECTION}" ]; then
		PS1="${PS1}${B_YELLOW}"
	else
		PS1="${PS1}${CYAN}"
	fi
	PS1="${PS1}\H${B_BLACK})"

	PS1="${PS1}-"

	# Current 1 minute system load.
	local load="\$(uptime | awk -F 'load average' '{ print \$2 }' | cut -d, -f1 | sed 's/: //g')"
	local scale="100"
	local percentUtilization="\$(echo \"scale=0;${scale} * ${load} / ${NUMBER_OF_CORES}\" | bc)"

	PS1="${PS1}(${CYAN}\$(echo \"${percentUtilization}%\")${B_BLACK})"

	PS1="${PS1}-"

	# Number of jobs running in the background.
	PS1="${PS1}(${CYAN}\j${B_BLACK})"

	PS1="${PS1}-"

	# Current datetime.
	PS1="${PS1}(${CYAN}\$(date '+%H:%M %Z')${B_BLACK})"

	if [ "${PROMPT_ENABLE_SCREEN_INFORMATION}" -eq 1 ]; then

		# Indicate whether we're currently within a terminal multiplexer session; 'S' = Screen or 'T' = TMUX.
		if [ ! -z "${STY}" ] || [ ! -z "${TMUX}" ]; then
			PS1="${PS1}-("

			if [ ! -z "${STY}" ]; then
				PS1="${PS1}${CYAN}s${B_BLACK})"
			elif [ ! -z "${TMUX}" ]; then
				local window=$(tmux display-message -p | awk '{ gsub("\\[|\\]", ""); print $1 }')
				PS1="${PS1}${CYAN}t-${window}${B_BLACK})"
			fi
		fi
	fi

	# Begin a new command prompt line.
	PS1="${PS1}\n"

	# Current working directory.
	PS1="${PS1}${B_BLACK}(${CYAN}\w${B_BLACK})"

	if [ "${PROMPT_ENABLE_FILE_INFORMATION}" -eq 1 ]; then

		PS1="${PS1}-"

		# Number of files in the current directory and their total size.
		PS1="${PS1}(${CYAN}\$(ls -1 | wc -l | sed 's: ::g') files, \$(ls -lah | grep -m 1 total | sed 's/total //')b${B_BLACK})"
	fi

	if [ "${PROMPT_ENABLE_GIT_REPO_IDENTIFICATION}" -eq 1 ]; then

		PS1="${PS1}-${CYAN}"

		# Print name of Git branch.
		PS1="${PS1}${CYAN}\$(ParseGitBranch)"
	fi

	if [ "${PROMPT_ENABLE_SVN_REPO_IDENTIFICATION}" -eq 1 ]; then

		PS1="${PS1}-${CYAN}"

		# Print name of SVN checkout.
		PS1="${PS1}${CYAN}\$(ParseSVNCheckout)"
	fi

	# Add input indicator before the user's input prompt.
	PS1="${PS1}${B_BLACK}--> "

	# Reset color back to the default which will be overwritten by subsequent output.
	PS1="${PS1}${COLOR_OFF}"
}

# Make a cache of the number of cores on the current system. This allows us to avoid retrieving this information every time the prompt is generated. Instead, the number is only retrieved when this file is sourced.
export NUMBER_OF_CORES="$(GetNumberOfCores)"

# Call the load prompt function to set the user's prompt to the custom version.
LoadPrompt
